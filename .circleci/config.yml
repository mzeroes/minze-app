# prettier: disable

version: 2
jobs:
  node:
    working_directory: ~/minze
    docker:
      - image: circleci/android:api-28-node
    steps:
      - checkout

      - restore_cache:
          key: yarn-v1-{{ checksum "./yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "./package.json" }}-{{ arch }}

      - run:
          name: yarn install
          command: |
            cd ./
            yarn

      # - run:
      #     name: jest tests
      #     command: |
      #       cd ./
      #       mkdir -p test-results/jest
      #       yarn test --maxWorkers=2
      #     environment:
      #       JEST_JUNIT_OUTPUT: ./test-results/jest/junit.xml

      - run:
          name: Unpack secrets
          command: |
            cd ./
            if [ "${CIRCLE_BRANCH}" == "master" ];
            then
              sudo yarn secrets:unpack -e production -p ${PRODUCTION_SECRETS_PASSPHRASE}
            elif [ "${CIRCLE_BRANCH}" == "staging" ];
            then
              sudo yarn secrets:unpack -e staging -p ${STAGING_SECRETS_PASSPHRASE}
            fi

      - restore_cache:
          key: bundle-v1-{{ checksum "./Gemfile.lock" }}-{{ arch }}

      - run: cd ./ && sudo gem install bundler && bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3

      - deploy:
          name: Deploy with CodePush
          command: |
            cd ./
            if [ "${CIRCLE_BRANCH}" == "master" ]|| [ "${CIRCLE_BRANCH}" == "staging" ];
            then
              echo 'export PATH=$(yarn global bin):$PATH' >> $BASH_ENV
              source $BASH_ENV
              yarn global add appcenter-cli
              appcenter login --token ${FL_APPCENTER_API_TOKEN} --quiet
            fi
            if [ "${CIRCLE_BRANCH}" == "master" ];
            then
              yarn deploy -t soft -e production
            elif [ "${CIRCLE_BRANCH}" == "staging" ];
            then
              yarn deploy -t soft -e staging
            fi

      - save_cache:
          key: bundle-v1-{{ checksum "./Gemfile.lock" }}-{{ arch }}
          paths:
            - ~/.bundle/
            - ./vendor/bundle

      - save_cache:
          key: yarn-v1-{{ checksum "./yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "./package.json" }}-{{ arch }}
          paths:
            - ./node_modules

      - persist_to_workspace:
          root: ~/minze
          paths:
            - ./node_modules
            - ./vendor/bundle

      - store_test_results:
          path: ./test-results

      - store_artifacts:
          path: ./test-results

  android:
    working_directory: ~/minze
    docker:
      - image: circleci/android:api-28-node
    steps:
      - checkout:
          path: ~/minze

      - attach_workspace:
          at: ~/minze

      - run:
          name: Unpack secrets
          command: |
            cd ./
            if [ "${CIRCLE_BRANCH}" == "master" ];
            then
              sudo yarn secrets:unpack -e production -p ${PRODUCTION_SECRETS_PASSPHRASE}
            elif [ "${CIRCLE_BRANCH}" == "staging" ];
            then
              sudo yarn secrets:unpack -e staging -p ${STAGING_SECRETS_PASSPHRASE}
            fi

      - run: cd ./ && sudo gem install bundler && bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3

      - run:
          name: yarn install
          command: |
            cd ./
            yarn

      - deploy:
          name: Build, Sign & Deploy
          command: |
            cd ./
            if [ "${CIRCLE_BRANCH}" == "master" ];
            then
              yarn deploy -t hard -o android -e production
            elif [ "${CIRCLE_BRANCH}" == "staging" ];
            then
              yarn deploy -t hard -o android -e staging
            fi

      - store_test_results:
          path: ./test-results

      - store_artifacts:
          path: ./test-results

  ios:
    macos:
      xcode: '10.1.0'
    environment:
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
    working_directory: ~/minze

    # use a --login shell so our "set Ruby version" command gets picked up for later steps
    shell: /bin/bash --login -o pipefail

    steps:
      - checkout

      - run:
          name: set Ruby version
          command: echo "ruby-2.4" > ~/.ruby-version

      - run:
          name: Install brew dependencies
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install gpg

      - run:
          name: Unpack secrets
          command: |
            cd ./
            if [ "${CIRCLE_BRANCH}" == "master" ];
            then
              sudo yarn secrets:unpack -e production -p ${PRODUCTION_SECRETS_PASSPHRASE}
            elif [ "${CIRCLE_BRANCH}" == "staging" ];
            then
              sudo yarn secrets:unpack -e staging -p ${STAGING_SECRETS_PASSPHRASE}
            fi

      - restore_cache:
          key: yarn-v1-{{ checksum "./yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "./package.json" }}-{{ arch }}

      # not using a workspace here as Node and Yarn versions
      # differ between the macOS executor image and the Docker containers above
      - run:
          name: yarn install
          command: |
            cd ./
            yarn

      - save_cache:
          key: yarn-v1-{{ checksum "./yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "./package.json" }}-{{ arch }}
          paths:
            - ./node_modules

      - restore_cache:
          key: bundle-v2-{{ checksum "./Gemfile.lock" }}-{{ arch }}

      - run:
          command: cd ./ && sudo gem install bundler && bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3

      - save_cache:
          key: bundle-v2-{{ checksum "./Gemfile.lock" }}-{{ arch }}
          paths:
            - ~/.bundle/
            - /Users/distiller/.gem/ruby/2.4.5/
            - ./vendor/bundle

      - deploy:
          name: Match, Build, Sign & Deploy
          command: |
            cd ./
            sudo xcode-select -s /Applications/Xcode-10.1.app
            if [ "${CIRCLE_BRANCH}" == "master" ];
            then
              yarn deploy -t hard -o ios -e production
            elif [ "${CIRCLE_BRANCH}" == "staging" ];
            then
              yarn deploy -t hard -o ios -e staging
            fi

workflows:
  version: 2
  node-android-ios:
    jobs:
      - node
      # - ios:
      #     requires:
      #       - node
      #     filters:
      #       branches:
      #         only:
      #           - master
      #           - staging
      - android:
          requires:
            - node
          filters:
            branches:
              only:
                - master
                - staging
